<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue实现语言识别与录音</title>
      <link href="/2022/08/21/vue-shi-xian-yu-yan-shi-bie-yu-lu-yin/"/>
      <url>/2022/08/21/vue-shi-xian-yu-yan-shi-bie-yu-lu-yin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>N1掉盘暂时性解决办法</title>
      <link href="/2021/01/27/n1-diao-pan-zan-shi-xing-jie-jue-ban-fa/"/>
      <url>/2021/01/27/n1-diao-pan-zan-shi-xing-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  最近入了N1的坑,刷了armbian系统,做emby服务器,然后就遇到了个大坑</p><p>  我的移动硬盘是东芝的，自带休眠，一开始正常使用，过后就发现会掉盘</p><p>  体现在ls命令上 <code>ls: reading directory &#39;.&#39;: Input/output error</code></p><p>  使用lsblk命令发现sda会变sdb,sdc….</p><p>  百度一圈，都是在&#x2F;etc&#x2F;fstab 加入uuid识别挂载，但是这样不管用啊，还是掉盘，一掉盘得手动重新挂载或者重启n1</p><h1 id="暂时解决办法"><a href="#暂时解决办法" class="headerlink" title="暂时解决办法"></a>暂时解决办法</h1><p>  由于不知道到底是什么原因导致的，只能写个小脚本解决，</p><ul><li><p>思路:</p><blockquote><p>每30秒ls检查一次，ls失败则自动挂载</p></blockquote></li><li><p>添加uuid识别挂载:</p><ol><li><p>lsblk查看分区信息<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/lsblk.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/lsblk.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br> 如图，我的是sda-sda1，挂载点是&#x2F;mnt&#x2F;sda1</p></li><li><p>blkid查看分区uuid<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/WindowsTerminal_orFlp4Bqaa.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/WindowsTerminal_orFlp4Bqaa.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br> 如图，我硬盘标签的是<code>LABEL=&quot;TOSHIBA&quot;</code> uuid是 <code>UUID=&quot;D282A4C682A4B081&quot;</code> 格式是 <code>TYPE=&quot;ntfs&quot;</code></p></li><li><p>在fstab添加uuid识别挂载<br> 编辑 <code>/etc/fstab</code>   vi编辑或者winscp登陆n1直接编辑文件<br> 最后一行加入 <code>uuid=   /mnt/sda1  auto defaults   0 0</code><br> 保存后执行<code>mount -a</code><br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/WindowsTerminal_c1HzeZypEZ.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/WindowsTerminal_c1HzeZypEZ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p></li></ol></li><li><p>制作shell脚本自动检测掉盘重新挂载</p><ol><li><p>检测脚本<br> automount.sh  -&gt;不会用的可以创建txt文本然后修改为.sh，再用winscp上传至&#x2F;home下</p> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!&#x2F;bin&#x2F;bashif ls &#39;&#x2F;mnt&#x2F;sda1&#39; 2&gt;&amp;1then  echo &quot;mounted&quot;else  echo &quot;not mounted&quot;  mount -afi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>每30秒执行<br> 由于cron定时任务最低1分钟执行，所以得再写一个脚本停顿30秒再执行<br> keep.sh</p> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!&#x2F;bin&#x2F;bashdate +&#39;%Y-%m-%d %H:%M:%S&#39;&#x2F;home&#x2F;automount.shsleep 30date +&#39;%Y-%m-%d %H:%M:%S&#39;&#x2F;home&#x2F;automount.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>上面两个脚本都放在&#x2F;home下</strong></p><ol start="4"><li><p>赋予权限</p> <pre class="line-numbers language-none"><code class="language-none">chmod 777 -R &#x2F;home&#x2F;automount.shchmod 777 -R &#x2F;home&#x2F;keep.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>添加定时任务<br> 执行<code>crontab -e</code></p> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">* * * * * &#x2F;home&#x2F;keep.sh &gt;&gt; &#x2F;home&#x2F;log.txt0 0 12 * * ? &#x2F;home&#x2F;autoremove.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 如果不想保留日志,用下面的写法</p> <pre class="line-numbers language-none"><code class="language-none">* * * * * &#x2F;home&#x2F;keep.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 完成后执行<code>crontab -l</code>可以查看定时任务<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/WindowsTerminal_7nE4CqsRUI.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/WindowsTerminal_7nE4CqsRUI.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p></li></ol></li></ul><h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><p>  用这种方法我的硬盘由于是自带休眠的，所以依旧能正常休眠</p><p><strong>但是</strong></p><p>  过段时间它会被ls指令唤醒，只是唤醒后不会转，只有指示灯亮，硬盘应该不会由过多磨损</p>]]></content>
      
      
      <categories>
          
          <category> Armbian </category>
          
          <category> N1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> N1 </tag>
            
            <tag> Armbian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo NextT主题博客美化</title>
      <link href="/2020/10/13/hexo-nextt-zhu-ti-bo-ke-mei-hua/"/>
      <url>/2020/10/13/hexo-nextt-zhu-ti-bo-ke-mei-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th>name</th><th>version</th></tr></thead><tbody><tr><td>Git</td><td>2.27.0</td></tr><tr><td>Node</td><td>12.19.0</td></tr><tr><td>npm</td><td>6.14.8</td></tr><tr><td>hexo</td><td>5.2.0</td></tr><tr><td>hexo-cli</td><td>4.2.0</td></tr><tr><td>NextT</td><td>7.8.0</td></tr></tbody></table><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><p><strong>前者一般称为 站点配置文件， 后者称为 主题配置文件</strong></p><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><pre class="line-numbers language-none"><code class="language-none">mkdir themes&#x2F;nextcurl -L https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;theme-next&#x2F;hexo-theme-next&#x2F;tarball&#x2F;v7.8.0 | tar -zxv -C themes&#x2F;next --strip-components&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更多安装方法请参考<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/INSTALLATION.md">官方github说明</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/README.md">NextT中文Readme.md</a></p><h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>下载好后在打开<strong>站点配置文件</strong>,在最后几行找到<code>theme</code>字段，并将值改为<code>next</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span><span class="token comment"># Plugins: hexo-generate-feed</span><span class="token comment">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>编辑<strong>站点配置文件</strong>,更改<code>language</code>值</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>Hans<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="选择主题样式Scheme"><a href="#选择主题样式Scheme" class="headerlink" title="选择主题样式Scheme"></a>选择主题样式Scheme</h2><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持四种 Scheme</p><ul><li>Muse - 默认 Scheme，上下布局，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li><li>Gemini</li></ul><p>Scheme 的切换通过更改<strong>主题配置文件</strong>，搜索 scheme 关键字，将你需用启用的 scheme 前面注释 # 去除即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># ---------------------------------------------------------------</span><span class="token comment"># Scheme Settings</span><span class="token comment"># ---------------------------------------------------------------</span><span class="token comment"># Schemes</span><span class="token comment"># scheme: Muse</span><span class="token key atrule">scheme</span><span class="token punctuation">:</span> Mist<span class="token comment"># scheme: Pisces</span><span class="token comment"># scheme: Gemini</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本信息配置"><a href="#基本信息配置" class="headerlink" title="基本信息配置"></a>基本信息配置</h2><p>打开<strong>站点配置文件</strong> ，找到Site模块</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span>      <span class="token comment">#标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment">#副标题</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment">#描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span>     <span class="token comment">#关键词</span><span class="token key atrule">author</span><span class="token punctuation">:</span>     <span class="token comment">#作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN    <span class="token comment">#语言</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub Page搭建个人博客</title>
      <link href="/2020/10/13/hexo-github-page-da-jian-ge-ren-bo-ke/"/>
      <url>/2020/10/13/hexo-github-page-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次使用Github-Page和hexo搭建个人博客"><a href="#记一次使用Github-Page和hexo搭建个人博客" class="headerlink" title="记一次使用Github Page和hexo搭建个人博客"></a>记一次使用Github Page和hexo搭建个人博客</h1><p>我用到的工具：</p><ul><li>PicGo:图床管理,<a href="https://github.com/Molunerfinn/PicGo/releases">github下载</a></li><li>ShareX:截图,steam免费下载</li></ul><h2 id="环境与安装"><a href="#环境与安装" class="headerlink" title="环境与安装"></a>环境与安装</h2><ol><li><p>安装好node和git，并注册号github账号</p><table><thead><tr><th>Git</th><th>Nodejs</th><th>GitHub</th></tr></thead><tbody><tr><td><a href="https://git-scm.com/downloads">Git下载</a></td><td><a href="https://nodejs.org/zh-cn/">Nodejs下载</a></td><td><a href="https://github.com/">GitHub注册</a></td></tr></tbody></table></li><li><p>检查版本</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> version<span class="token function">node</span> -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/git-v.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/git-v.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p></li><li><p>安装hexo</p><p> 创建一个文件夹，文件夹内右键Git Bash Here 执行:<code>npm install -g hexo-cli</code><br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_9CshgcY4DP.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_9CshgcY4DP.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br> 安装好后，执行以下命令，在新文件夹创建所需文件</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init myBlog<span class="token builtin class-name">cd</span> myBlog<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_oN3xD1u1mc.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_oN3xD1u1mc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_rTyIO2jyeD.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_rTyIO2jyeD.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p> 安装好后，myBlog文件夹的目录如下:<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/msedge_4e0qlhEige.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/msedge_4e0qlhEige.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p> 继续执行<code>hexo generate</code></p></li><li><p>查看hexo运行效果</p><p> git bash终端执行<code>hexo s</code>命令<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_3rQ6XYra1x.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_3rQ6XYra1x.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br> 最后在浏览器中输入<code>http://localhost:4000</code>回车就可以预览效果了<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/msedge_vrnBHdSBuX.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/msedge_vrnBHdSBuX.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br> 以上是我修改后的主题的预览效果，使用了<a href="https://github.com/theme-next/hexo-theme-next">next主题</a></p><p> 接下来就是部署到github了</p></li><li><p>注册github<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/GitHub.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/GitHub.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/Join-GitHub.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/Join-GitHub.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br> 注册好，邮箱验证好后，就可以登录了</p><p> 然后新建一个仓库</p><p> <font color=#FF0000><strong>ps:</strong> <em>只能使用一个同名仓库托管一个静态站点</em></font></p><p> 由于我已经创建好了，就网上找了张图<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/msedge_iPq2wb9mnr.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/msedge_iPq2wb9mnr.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p> 下面是我的仓库设置<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/Options1.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/Options1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p> 设置settings里面选择GitHub Page主题</p><p> 创建好后，就可以访问http:&#x2F;&#x2F;你的用户名.github.io查看初始效果了</p></li><li><p>配置ssh</p><ul><li><p>监测是否有已经存在的SSH keys:</p><p>  git bash 终端执行:<code>ls -al ~/.ssh</code></p><p>  如果有SSH keys: 就会看到如下文件 id_rsa    id_rsa.pub<br>  <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_ZsX7TQaxMJ.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_ZsX7TQaxMJ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>  (除了我自己生成的这种,官方教程里说,SSH keys也有可能是以下几种文件:</p><ul><li>id_dsa.pub</li><li>id_ecdsa.pub</li><li>id_ed25519.pub<br>  )</li></ul></li><li><p>如果没有的话,就生成一个SSH keys:</p><p>  先执行以下命令配置本地账户:</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"邮箱地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>ssh-keygen -t rsa -C &quot;上面的游戏&quot;</code></p><p>  然后会出现:</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/Users/you/.ssh/id_rsa<span class="token punctuation">)</span>: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  就是让你输入SSH keys要保存在哪里,一般不用改,就直接回车就好了.</p><p>  然后会出现:</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: <span class="token punctuation">[</span>Type a passphrase<span class="token punctuation">]</span> <span class="token comment"># Enter same passphrase again: [Type passphrase again] </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  冒号后面输入一个密码,这个密码后面会用到,所以要记住!</p><p>  创建成功后,他会提示你SSH keys保存在哪里:</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Your identification has been saved <span class="token keyword">in</span> /Users/you/.ssh/id_rsa.<span class="token comment"># Your public key has been saved in /Users/you/.ssh/id_rsa.pub.</span><span class="token comment"># The key fingerprint is:</span><span class="token comment"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  如图:<br>  <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/ssh_p1.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/ssh_p1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p></li><li><p>找到SSH keys:</p><p>  根据上一步里告诉你的路径,找到保存SSH keys的地方,我的是在 C:\Users\zqzes.ssh</p><p>  其中 id_rsa.pub 就是SSH keys 如果为了防止以后找不到,可以把他们自己另存到其它地方</p></li><li><p>为github仓库添加SSH keys</p><p>  打开上面创建的仓库,点击’Settings’,再左侧的’Deploy keys’:<br>  <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/Options21.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/Options21.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>  点击’Add deploy key’</p><p>  然后把上面创建的id_rsa.pub里的内容复制到Key里去,Title部分随便填. 点击’Add key’</p><p>  添加的过程中,还要再输入一次github的密码</p></li><li><p>测试连接</p><p>  回到git bash执行<code>ssh -T git@github.com</code><br>  <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_7Juqz6PmpM.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_7Juqz6PmpM.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>  如上图，一些奇怪的提示，最后问你yes&#x2F;no，输入yes就好<br>  然后提示你输入密码，如下</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Enter passphrase <span class="token keyword">for</span> key <span class="token string">'/c/Users/zqzes/.ssh/id_rsa'</span><span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  最后它提示你:</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hi, 用户名/用户名.github.io<span class="token operator">!</span> You've successfully authenticated, but GitHub does notprovide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p> 这样就ok了</p></li><li><p>配置yml准备发布<br> myBlog内有个文件叫<code>_config.yml</code>,打开它,拉到最底下,做如下修改:</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'git'</span>   <span class="token comment">#这里应为git,如使用github会发生错误</span>    <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/zqzess/zqzess.github.io    <span class="token comment">#把zqzess改成自己的用户名</span>    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 然后git bash执行<code>npm install hexo-deployer-git --save</code>安装部署插件<br> <img src="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_40ozYzOhzN.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/zqzess/pichouse/pic/mintty_40ozYzOhzN.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p> 最后执行以下命令就可以部署上传了</p><p> <code>hexo g -d</code></p><p> g是generate缩写,d是deploy缩写</p><p> 然后就可以访问https:&#x2F;&#x2F;你的用户名.github.io查看博客了</p></li></ol><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><ol><li><p>新建文章</p><p> git bash执行:<code>hexo new &#39;文章标题&#39;</code></p><p> 完成后在&#x2F;source&#x2F;_posts下可以看到’文章标题.md’的文件，md是MarkDown的拓展名,网上可以找到它的语法</p><p> 文章写好依次后执行:</p> <pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 然后可以在<a href="http://localhost::4000预览效果">http://localhost::4000预览效果</a></p><p> 最后，发布到github，依次执行:</p> <pre class="line-numbers language-none"><code class="language-none">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <pre class="line-numbers language-none"><code class="language-none">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> hexo clean可以请出缓存和已生成静态文件</p></li><li><p>草稿</p><p> git bash执行:&#96;&#96;hexo new draft ‘文章标题’</p><p> 完成后在&#x2F;source&#x2F;_drafts下可以看到草稿</p><p> 发布草稿执行:<code>hexo publish [layout] &lt;filename&gt;</code></p></li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>主题文件可以放在myBlog&#x2F;themes&#x2F;下面<br>后面我会写一篇关于主题美化及容易踩的坑和解决方案</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.cnblogs.com/liulangmao/p/4323064.html">使用hexo搭建github.io博客(一)</a></li><li><a href="https://segmentfault.com/a/1190000017986794">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a></li><li><a href="https://segmentfault.com/a/1190000017986794">三分钟在GitHub上搭建个人博客</a></li><li><a href="https://blog.csdn.net/qq_34106574/article/details/82704883">搭建自己的github.io博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Page </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trojan代理搭建</title>
      <link href="/2020/07/12/trojan-dai-li-da-jian/"/>
      <url>/2020/07/12/trojan-dai-li-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a>Trojan</h2><p>trojan是最近兴起的网络工具，出来时间的比较短，<br>它主要原理是把流量伪装成常见的https流量，虽然v2ray也能实现伪装https，<br>但是与trojan比起来多了很多层加密，所以连接速度也会慢慢上很多。<br>目前trojan使用的人数应该是比不上v2ray的，官方客户端也很简陋，就是个控制台，<br>生态也不是很完善。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>目前翻墙还是违法的，虽然有各种伪装翻墙手段，但是既然翻墙了就有可能会被GFW检测到，<br>同时也可能会被网警查到。<strong>所以请不要翻墙干违法的事情，身为国家公民，有义务去维护国家利益，<br>而不是损害国家利益。</strong> <del>所以原则上不建议翻墙</del> ，但是有的时候还有有需要的，比如github<br>翻墙加载下载速度都比直连快;-) </p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>trojan项目官网：<a href="https://github.com/trojan-gfw">https://github.com/trojan-gfw</a></p><table><thead><tr><th>trojan win客户端下载</th><th align="center">安卓</th><th align="right">linux</th><th align="center">mac</th><th align="center">ios</th></tr></thead><tbody><tr><td><a href="https://github.com/trojan-gfw/trojan/releases">trojan</a></td><td align="center"><a href="https://github.com/trojan-gfw/igniter/releases">igniter</a></td><td align="right"><a href="https://github.com/trojan-gfw/trojan/releases">trojan</a></td><td align="center"><a href="https://github.com/trojan-gfw/trojan/releases">trojan-mac</a></td><td align="center">iphone&#x2F;ipad 建议使用shadowrocket</td></tr></tbody></table><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>前置条件</p><ul><li>需要一台国外的vps，系统建议centos7；vps商家新手建议 <font color=#00ffff size=3>vultr</font></li><li>域名；域名可以从国外namesilo或者namecheap购买，或者国内腾讯云，阿里云购买</li><li>域名的证书，可从<strong>let’s ENcrypt</strong>获取免费证书，或者腾讯云阿里云都提供免费证书</li><li>使用bitvise或者xshell连接linux服务器</li></ul><p>安装trojan服务端,以centos7为例<br>  <pre class="line-numbers language-none"><code class="language-none">sudo bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;trojan-gfw&#x2F;trojan-quickstart&#x2F;master&#x2F;trojan-quickstart.sh)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>安装完成后，trojan配置文件是在 <code>/usr/local/etc/trojan/config.json</code></p><p>初始内容是</p><pre class="line-numbers language-none"><code class="language-none">&#123;    &quot;run_type&quot;: &quot;server&quot;,     &quot;local_addr&quot;: &quot;0.0.0.0&quot;,    &quot;local_port&quot;: 443,    &quot;remote_addr&quot;: &quot;127.0.0.1&quot;,    &quot;remote_port&quot;: 80,    &quot;password&quot;: [        &quot;password1&quot;,        &quot;password2&quot;    ],    &quot;log_level&quot;: 1,    &quot;ssl&quot;: &#123;        &quot;cert&quot;: &quot;&#x2F;path&#x2F;to&#x2F;certificate.crt&quot;,        &quot;key&quot;: &quot;&#x2F;path&#x2F;to&#x2F;private.key&quot;,        &quot;key_password&quot;: &quot;&quot;,        &quot;cipher&quot;: &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&quot;,        &quot;cipher_tls13&quot;: &quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;,        &quot;prefer_server_cipher&quot;: true,        &quot;alpn&quot;: [            &quot;http&#x2F;1.1&quot;        ],        &quot;reuse_session&quot;: true,        &quot;session_ticket&quot;: false,        &quot;session_timeout&quot;: 600,        &quot;plain_http_response&quot;: &quot;&quot;,        &quot;curves&quot;: &quot;&quot;,        &quot;dhparam&quot;: &quot;&quot;    &#125;,    &quot;tcp&quot;: &#123;        &quot;prefer_ipv4&quot;: false,        &quot;no_delay&quot;: true,        &quot;keep_alive&quot;: true,        &quot;reuse_port&quot;: false,        &quot;fast_open&quot;: false,        &quot;fast_open_qlen&quot;: 20    &#125;,    &quot;mysql&quot;: &#123;        &quot;enabled&quot;: false,        &quot;server_addr&quot;: &quot;127.0.0.1&quot;,        &quot;server_port&quot;: 3306,        &quot;database&quot;: &quot;trojan&quot;,        &quot;username&quot;: &quot;trojan&quot;,        &quot;password&quot;: &quot;&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>local_port</code>是要监听的端口，默认443，不要改</li><li><code>remote_addr</code>和<code>remote_port</code>:非trojan协议是，请求将转发<br>的地址和端口。可以填有效的ip&#x2F;端口 。<strong>如果你要在本机搭建网站请保持默认不要更改。</strong></li><li><code>password</code>密码，需要几个账号就，几个密码，<strong>最后一行不要有逗号</strong></li><li><code>cert</code>&amp;<code>key</code>,证书和域名，腾讯云申请的证书请选择nginx版的</li><li><code>key_password</code>，证书如果有密码就填上，无不要填</li><li><code>alpn</code>混淆默认就好</li></ul><p>修改好配置文件后，保存，然后输入linux命令设置开机启动：</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable trojan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再启动trojan：</p><pre class="line-numbers language-none"><code class="language-none">systemctl start trojan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查是否在运行：<code>ss -lp | grep trojan</code>,有输出内容则正常<br>，输出为空，可能是</p><ul><li>config.json文件语法出错</li><li>开了selinux，请先关闭在启动。关闭:<code>setenforce 0</code></li></ul><p><code>service iptables status</code>查看防火墙状态<br>，如果在运行请放行端口 </p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --permanent --add-service&#x3D;https # 端口是443firewall-cmd --permanent --add-port&#x3D;端口号&#x2F;tcp # 其他端口号firewall-cmd --reload # 重新加载防火墙<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者永久关闭防火墙（<strong>不建议</strong>）</p><pre class="line-numbers language-none"><code class="language-none"># 永久关闭防火墙chkconfig iptables off  # 永久关闭后重启chkconfig iptables on　　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在本服务器安装网站伪装"><a href="#在本服务器安装网站伪装" class="headerlink" title="在本服务器安装网站伪装"></a>在本服务器安装网站伪装</h3><p>GFW是根据特征值来封锁的，如果你长时间大流量访问一个网站，它来查看发现网站不存在<br>，这明显有问题，所以建议设置伪装站。如果原本有nginx部署的网站，也可以参考此来伪装</p><p>安装nginx</p><pre class="line-numbers language-none"><code class="language-none">##安装yum install -y epel-release &amp;&amp; yum install -y nginx##设置开机自启并启动systemctl enable nginx; systemctl start nginx##放行防火墙firewall-cmd --permanent --add-service&#x3D;http##防火墙重新加载配置firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪装网站模版可以百度搜索下载<br>直接上传到<code>/usr/share/nginx</code>下</p><p>nginx配置文件路径<code>/etc/nginx/nginx.conf</code></p><p>把原始的<code>nginx.conf</code>改成如下所示<br>ps:<strong>只改动server{}块，其他不要动，把原来的是server{}改掉，再添加一个强制转发https&#x2F;443端口的server{}块</strong></p><pre class="line-numbers language-none"><code class="language-none">server &#123;        listen 127.0.0.1:80;        server_name example.com;#域名        root  &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;example.com;#网页文件夹路径        index index.html; #自己的网页主页                ssl_certificate   &#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt;#改成自己的证书路径        ssl_certificate_key   &#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key;#改成自己的证书秘钥路径        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;        ssl_prefer_server_ciphers on;        ssl_session_cache shared:SSL:10m;        ssl_session_timeout 10m;        # Load configuration files for the default server block.        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;        location &#x2F; &#123;            index index.html;        &#125;        error_page 404 &#x2F;404.html;            location &#x3D; &#x2F;40x.html &#123;        &#125;        error_page 500 502 503 504 &#x2F;50x.html;            location &#x3D; &#x2F;50x.html &#123;        &#125;    &#125;server &#123;    listen 80 default_server;    listen [::]:80 default_server;    server_name example.com;    rewrite ^(.*)$ https:&#x2F;&#x2F;$&#123;server_name&#125;$1 permanent;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的example.com改成自己的域名</p><p><strong>改好后保存，<code>nginx -t</code>检查配置文件是否有错误，没错误输入<code>nginx -s reload</code>重新加载配置文件</strong></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><ul><li><code>local_port</code>改成你想要的端口</li><li><code>remote_addr</code>改成你服务器域名，也就是nginx里面填的域名</li><li><code>remote_port</code>服务器监听的端口，443</li><li><code>password</code>服务器trojan设置的密码<br>其他可以不用改，然后保存就可以启动了。<br>无法运行请先<strong>先双击“VC_redist.x86.exe”安装依赖，然后再运行</strong></li></ul><h2 id="设置系统代理上网"><a href="#设置系统代理上网" class="headerlink" title="设置系统代理上网"></a>设置系统代理上网</h2><p>打开设置-&gt;网络和Internet-&gt;代理</p><p><img src="https://cdn.cacher.io/attachments/u/3d41edeyhrwt3/KqKlwMUGmQyW92puGrF5XayMFTssHEVq/%E4%BB%A3%E7%90%86.PNG" class="lazyload placeholder" data-srcset="https://cdn.cacher.io/attachments/u/3d41edeyhrwt3/KqKlwMUGmQyW92puGrF5XayMFTssHEVq/%E4%BB%A3%E7%90%86.PNG" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>使用代理服务器<br>地址<code>127.0.0.1</code>端口填trojan客户端填的<code>local_port</code></p><p>下面一栏填入</p><pre class="line-numbers language-none"><code class="language-none">localhost;127.*;10.*;172.16.*;172.17.*;172.18.*;172.19.*;172.20.*;172.21.*;172.22.*;172.23.*;172.24.*;172.25.*;172.26.*;172.27.*;172.28.*;172.29.*;172.30.*;172.31.*;172.32.*;192.168.*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请勿将代理服务器用于本地（Intranet）地址<strong>选上</strong><br>最后保存</p><h3 id="有v2rayN客户端的"><a href="#有v2rayN客户端的" class="headerlink" title="有v2rayN客户端的"></a>有v2rayN客户端的</h3><p>在v2rayN上添加Socks服务器<br>服务器地址填<code>127.0.0.1</code>,服务器端口填你上面填的端口，别名trojan，然后保存就可以使用了</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> Trojan代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/11/hello-world/"/>
      <url>/2020/07/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
